package com.bookmyshow.util;

import java.util.function.Function;
import java.util.stream.Collectors;

import com.bookmyshow.entity.Cast;
import com.bookmyshow.entity.Language;
import com.bookmyshow.entity.MovieData;
import com.bookmyshow.model.Movies;

public class MovieDataMapper {

	public static Function<MovieData, Movies> MovieDataToMovies(){
		return (MovieData movieData)->{
			
			Movies movie = new Movies();
			
			movie.setMovieName(movieData.getMovieName());
			
			//movieData.setMovieName(movie.getMovieName());
			movie.setMovieLikes(movieData.getMovieLikes());
			movie.setMovieRating(movieData.getMovieRating());
			movie.setMovieDuration(movieData.getMovieDuration());
			movie.setImgUrl(movieData.getMovieUrl());
			movie.setMovieYear(movieData.getYear());
			
			movie.setMovieCast(movieData.getMovieCasts().stream()
					.map(CastMapper.castEntityToCastName())
					.collect(Collectors.toSet()));
			
			movie.setMovieGenre(movieData.getMovieGenre().stream()
					.map(GenreMapper.genreEntityToGenreName())
					.collect(Collectors.toSet()));
			
			movie.setMovieLanguage(movieData.getMovieLanguages().stream()
					.map(Language::getLanguage)
					.collect(Collectors.toSet()));
			
			movie.setMovieLocation(movieData.getMovieLocations().parallelStream()
					.map(LocationMapper.locationEntityToLocation())
					.collect(Collectors.toSet()));
			
			return movie;
		};
	}

	
	public static Function<Movies, MovieData> MovieToMovieData(){
		return (Movies movie)->{
			MovieData movieData = new MovieData();
			
			movieData.setMovieName(movie.getMovieName());
			movieData.setMovieLikes(movie.getMovieLikes());
			movieData.setMovieRating(movie.getMovieRating());
			movieData.setMovieDuration(movie.getMovieDuration());
			movieData.setMovieUrl(movie.getImgUrl());
			movieData.setYear(movie.getMovieYear());
			
			movieData.setMovieCasts(movie.getMovieCast().stream()
					.map(CastMapper.castNameToCastEntity())
					.collect(Collectors.toSet()));
			
			movieData.setMovieGenre(movie.getMovieGenre().stream()
					.map(GenreMapper.genreNameToGenreEntity())
					.collect(Collectors.toSet()));
			
			movieData.setMovieLanguages(movie.getMovieLanguage().stream()
					.map(LanguageMapper.languageNameToLanguageEntity())
					.collect(Collectors.toSet()));
			
			movieData.setMovieLocations(movie.getMovieLocation().stream()
					.map(LocationMapper.locationToEnity()).collect(Collectors.toSet()));
			
			return movieData;
		};
	}
}
