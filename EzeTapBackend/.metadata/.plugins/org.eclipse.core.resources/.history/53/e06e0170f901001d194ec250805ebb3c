/**
 * 
 */
package com.bookmyshow.serviceImpl;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

import javax.persistence.EntityManager;
import javax.persistence.Query;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.bookmyshow.entity.MovieData;
import com.bookmyshow.model.MovieAddRequestBody;
import com.bookmyshow.model.MovieViewDetailsReq;
import com.bookmyshow.model.Movies;
import com.bookmyshow.repository.MovieRepo;
import com.bookmyshow.repository.TimingRepo;
import com.bookmyshow.service.MovieService;
import com.bookmyshow.util.MovieDataMapper;

/**
 * @author jai12
 *
 */
@Service
public class MovieServiceImpl implements MovieService {

	@Autowired
	private MovieRepo movieRepo;
	
	@Autowired
	private TimingRepo timingRepo;
	
	@Autowired
	EntityManager entityManager;
	
	@Override
	public String addMovieDetails(MovieAddRequestBody movieAddReq) {
		try {
			addMovie(movieAddReq);
		} catch (Exception e) {
			e.printStackTrace();
			return "Error:: while saving data.";
			
		}
		return "Movie got added successfully.";
	}

	private void addMovie(MovieAddRequestBody movieAddReq) {
		
//		movieAddReq.getMovieList().stream().map(MovieDataMapper.MoviesToMovieData())
//				.forEach(movieData -> movieRepo.save(movieData));
//		MovieData movieData = new MovieData();
//		movieRepo.save(movieData);
	}

	@Override
	public List<Movies> fetchAllMovies() {
		List<MovieData> resultList = movieRepo.findAll();
		List<Movies> movieList = resultList.stream()
				.map(MovieDataMapper.MovieDataToMovies())
				.collect(Collectors.toList());
		
		return movieList;
	}

	@Override
	public List<Movies> fetchLandingPageMovies() {
		List<MovieData> resultList = movieRepo.findAll();
		List<Movies> movieList = resultList.stream()
				.map(MovieDataMapper.MovieDataToLandingPageMovies())
				.collect(Collectors.toList());
		
		return movieList;
	}

	@Override
	public List<Movies> fetchMovieViewDetaild(MovieViewDetailsReq requestBody) {
	  List<MovieData> movieData = movieRepo.findByMovieId(requestBody.getMovieId());
	 
	  movieData.forEach(movie->{
		  movie.getMovieLocations().stream().filter(location-> location.getId()==requestBody.getLocationId()).forEach(location->{
			  System.out.println(location.getCity());
			  location.getTheatreList().stream().forEach(theatre->{
				  System.out.println(theatre.getTheatreName());
				 // timingRepo.findByMovieIdAndTheatreId(requestBody.getMovieId(), theatre.getId());
				  String query = "Select Distinct tm.movie_timing from  timing tm, movie_theatre_timing mtt "
				  		+ "where mtt.movie_id = :movieId AND mtt.theatre_id = :theatreId AND mtt.timing_id = tm.timing_id";
				 Query sqlquery =  entityManager.createNativeQuery(query);
				 sqlquery.setParameter("movieId", requestBody.getMovieId());
				 sqlquery.setParameter("theatreId", theatre.getId());
				 List<String> timings = sqlquery.getResultList();
				 System.out.println(timings);
				  
			  });
		  });
	  });
		return null;
	}
}
